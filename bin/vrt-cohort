#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import logging
import sys

from vrt.cohorts import main
from vrt.version import __version__

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="vrt-cohort: conflate texts according to meta data into cohorts",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-v", "--version", action="version", version="cwb-vrt %s" % __version__,
                        help="output version information and exit")

    parser.add_argument("glob_in", type=str,
                        help="glob to paths to read from (.vrt.gz)")
    parser.add_argument("--path_out", "-o", default=None, type=str,
                        help="where to save the result [derived from (first) path_in]")
    parser.add_argument("--force", "-f", default=False, action='store_true',
                        help="overwrite existing output file?")

    parser.add_argument("--level-old", default="text", type=str,
                        help="name of s-att used for partitioning in input")
    parser.add_argument("--level-new", default="subtext", type=str,
                        help="new name of --level-old in output")
    parser.add_argument("--level-cohort", default="text", type=str,
                        help="name of s-att used for partitioning in output")

    parser.add_argument("--categorical", "-c", default=[], nargs="+", type=str,
                        help="text attribute names used for cohorting")
    parser.add_argument("--memory", "-m", default=False, action='store_true',
                        help="sort in memory?")

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    main(parser.parse_args())
