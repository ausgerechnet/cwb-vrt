#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import logging
import sys

from vrt.meta import main
from vrt.version import __version__

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="vrt-meta: create tsv table of meta data stored in s-atts",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-v", "--version", action="version", version="cwb-vrt %s" % __version__,
                        help="output version information and exit")

    parser.add_argument("glob_in", type=str,
                        help="path(s) to .[xml|vrt].gz to get meta data from")
    parser.add_argument("--path_out", "-o", default=None, type=str,
                        help="where to save result [derived from each path_in]")
    parser.add_argument("--force", "-f", default=False, action='store_true',
                        help="overwrite existing output file?")

    parser.add_argument("--level", "-t", default="text", type=str,
                        help="primary level that contains meta data")
    parser.add_argument("--index", "-i", default="id", type=str,
                        help="attribute of level containing IDs")
    parser.add_argument("--extra", "-e", default=[], type=str, nargs='+',
                        help="additional levels with extra info (above primary level)")
    parser.add_argument("--tokens", "-c", default=False, action='store_true',
                        help="count tokens?")
    # TODO: implement functionality
    # parser.add_argument("--terms", "-s", help="path to terms to count (one per line)", type=str)
    # parser.add_argument("--term_column", default=1, help="which column to use for counting [1]")

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    main(parser.parse_args())
